C51 COMPILER V9.60.7.0   ST7565                                                            02/02/2023 23:18:42 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE ST7565
OBJECT MODULE PLACED IN st7565.OBJ
COMPILER INVOKED BY: C:\Keil_v5_9.61\C51\BIN\C51.EXE st7565.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include"st7565.h"
   2          
   3          
   4          
   5          void LcdSt7565_WriteCmd(cmd)
   6          {
   7   1        LCD12864_CS = 0;     //chip select
   8   1        LCD12864_RD = 1;     //disable read
   9   1        LCD12864_RS = 0;       //select command
  10   1        LCD12864_RW = 0;       //select write
  11   1        _nop_();
  12   1        _nop_();
  13   1      
  14   1        DATA_PORT = cmd; //put command
  15   1        _nop_();
  16   1        _nop_();
  17   1      
  18   1        LCD12864_RW = 1;     //command writing
  19   1      }
  20          
  21          void LcdSt7565_WriteData(dat)
  22          { 
  23   1        LCD12864_CS = 0;     //chip select
  24   1        LCD12864_RD = 1;     //disable read
  25   1        LCD12864_RS = 1;       //select data
  26   1        LCD12864_RW = 0;       //select write
  27   1        _nop_();
  28   1        _nop_();
  29   1      
  30   1        DATA_PORT = dat;       //put data
  31   1        _nop_();
  32   1        _nop_();
  33   1      
  34   1        LCD12864_RW = 1;     //data writing
  35   1      }
  36          
  37          
  38          void Lcd12864_Init()
  39          {
  40   1        uchar i;
  41   1        LCD12864_RSET = 0;
  42   1        for (i=0; i<100; i++);
  43   1        LCD12864_CS = 0;
  44   1        LCD12864_RSET = 1;
  45   1        
  46   1        //----------------Star Initial Sequence-------//
  47   1      
  48   1        LcdSt7565_WriteCmd(0xE2);  //reset
  49   1        for (i=0; i<100; i++);     
  50   1      
  51   1        LcdSt7565_WriteCmd(0xA1);  //ADC select segment direction 
  52   1        
  53   1        LcdSt7565_WriteCmd(0xC8);  //Common direction 
  54   1                          
  55   1        LcdSt7565_WriteCmd(0xA6);  //reverse display
C51 COMPILER V9.60.7.0   ST7565                                                            02/02/2023 23:18:42 PAGE 2   

  56   1      
  57   1        LcdSt7565_WriteCmd(0xA4);  //normal display
  58   1        
  59   1        LcdSt7565_WriteCmd(0xA2);  //bias set 1/9
  60   1        
  61   1        LcdSt7565_WriteCmd(0xF8);  //Boost ratio set
  62   1        LcdSt7565_WriteCmd(0x01);  //x4
  63   1        
  64   1        LcdSt7565_WriteCmd(0x81);  //V0 a set
  65   1        LcdSt7565_WriteCmd(0x23);
  66   1      
  67   1        LcdSt7565_WriteCmd(0x25);  //Ra/Rb set
  68   1      
  69   1        LcdSt7565_WriteCmd(0x2F);
  70   1        for (i=0; i<100; i++);
  71   1      
  72   1        LcdSt7565_WriteCmd(0x40);  //start line
  73   1      
  74   1        LcdSt7565_WriteCmd(0xAF);  // display on
  75   1        for (i=0; i<100; i++);
  76   1      
  77   1      }
  78          
  79          void Lcd12864_ClearScreen(void)
  80          {
  81   1        uchar i, j;
  82   1      
  83   1        for(i=0; i<8; i++)
  84   1        {
  85   2      
  86   2          LcdSt7565_WriteCmd(0xB0+i); 
  87   2      
  88   2      
  89   2          LcdSt7565_WriteCmd(0x10); 
  90   2          LcdSt7565_WriteCmd(0x04);                
  91   2          
  92   2          for(j=0; j<128; j++)
  93   2          {
  94   3            LcdSt7565_WriteData(0x00);  
  95   3          }
  96   2        }
  97   1      }
  98          
  99          #ifdef  CHAR_CODE
              
              #include"charcode.h"
              
              uchar Lcd12864_Write16CnCHAR(uchar x, uchar y, uchar *cn)
              {
                uchar j, x1, x2, wordNum;
              
                if(y > 7)
                {
                  return 0;
                }
              
                if(x > 128)
                {
                  return 0;
                }
                y += 0xB0;     
                LcdSt7565_WriteCmd(y);
C51 COMPILER V9.60.7.0   ST7565                                                            02/02/2023 23:18:42 PAGE 3   

                while ( *cn != '\0')   
                { 
                
                  LcdSt7565_WriteCmd(y);
              
                  x1 = (x >> 4) & 0x0F;   
                  x2 = x & 0x0F;          
              
                  LcdSt7565_WriteCmd(0x10 + x1);  
                  LcdSt7565_WriteCmd(0x04 + x2);  
              
                  for (wordNum=0; wordNum<50; wordNum++)
                  {
                    if ((CN16CHAR[wordNum].Index[0] == *cn)
                         &&(CN16CHAR[wordNum].Index[1] == *(cn+1)))
                    {
                      for (j=0; j<32; j++) 
                      {   
                        if (j == 16)   
                        {
              
                            LcdSt7565_WriteCmd(y + 1);
                    
              
                          LcdSt7565_WriteCmd(0x10 + x1);   
                          LcdSt7565_WriteCmd(0x04 + x2);  
                        }
                        LcdSt7565_WriteData(CN16CHAR[wordNum].Msk[j]);
                      }
                      x += 16;
                    }
                  } 
                  cn += 2;
                } 
                return 1;
              }
              
              #endif
 156          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    182    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
